#!/bin/bash

# MPVLOOP - run MPV with loop options set according to a pattern.
# SPDX-License-Identifier: Unlicense
#
# This small work is dedicated to all those helping to protect endangered species.
# 2024 Looper GuarÃ¡

lpat="[aA][0-9]+[bB][0-9]+" # loop pattern is a regex to match A number B number
sc=0.1 # conversion scale for numbers in loop pattern
q=1 # time in seconds to press any key and quit the script
d=, # field delimiter in playlist

# update01: this script file
scr1pt() {
	basename "$0"
}

# required software
swreq() {
	type awk >/dev/null 2>&1 || { echo >&2 "$(scr1pt): WARNING: AWK not found - aborting."; exit 1; }
	type file >/dev/null 2>&1 || { echo >&2 "$(scr1pt): WARNING: FILE (command) not found - aborting."; exit 1; } # update01
	type grep >/dev/null 2>&1 || { echo >&2 "$(scr1pt): WARNING: GREP not found - aborting."; exit 1; } # update01
	type mpv >/dev/null 2>&1 || { echo >&2 "$(scr1pt): WARNING: MPV not found - aborting."; exit 1; }
}

# timestamp conversion to time representation in loop pattern
lpat_tt() {
	h=$(awk "BEGIN { print $(echo "$1" | cut -d ':' -f 1) * 3600 }")
	m=$(awk "BEGIN { print $(echo "$1" | cut -d ':' -f 2) * 60 }")
	s=$(echo "$1" | cut -d ':' -f 3)
	awk 'BEGIN { printf ("%.0f", ( '"$h"' + '"$m"' + '"$s"' ) / '"$sc"' ) }'
}

# lpat a and b functions convert time representation in loop patterns for MPV options
lpat_aa() {
	echo "$ab" | tr -d '{a,A}' | tr '{b,B}' '-' | cut -d '-' -f 1
}

lpat_bb() {
	echo "$ab" | tr -d '{a,A}' | tr '{b,B}' '-' | cut -d '-' -f 2
}

lpat_a() {
	awk "BEGIN { print $aa * $sc }"
}

lpat_b() {
	awk "BEGIN { print $bb * $sc }"
}

# wait and confirm to quit the script
uquit() {
	echo "$(scr1pt): INFO: Press any key to exit the script or skip the file."
	read -rst "$q" -N 1
	if [ "$?" -eq 0 ] ; then
		echo "$(scr1pt): File: $f1"
		echo "$(scr1pt): Please confirm:"
		select ans in "EXIT the script" "SKIP file" "Cancel" ; do
			case "$ans" in
				'EXIT the script' ) echo "$(scr1pt): $(( iter - 1 )) iterations completed - exiting..." ; exit;;
				'SKIP file' ) return 1;;
				'Cancel' ) break;;
			esac
		done 2>&1
	fi
}

# main function where time points are set with MPV appropriate options
core() {
	if [ "$aa" -eq 0 ] && [ "$bb" -eq 0 ] ; then # both time a and b are unset, loop file
		echo "$(scr1pt): Loop pattern: $(echo "$ab" | grep -oE "$lpat") (file)" # update01: only pattern without a possible tag
		echo "$(scr1pt): Options: --loop-file=inf" "$@" # print MPV options
		echo "$(scr1pt): Starting mpv..."
		mpv --loop-file=inf "$@" "$f1"
		return
	elif [ "$aa" -eq 0 ] ; then # a time unset
		b=$(lpat_b) # b time
		echo "$(scr1pt): Loop pattern and duration: $(echo "$ab" | grep -oE "$lpat") (${b}s)" # update01: only pattern without a possible tag
		echo "$(scr1pt): Options: --ab-loop-a=no --ab-loop-b=$b" "$@" # print MPV options
		echo "$(scr1pt): Starting mpv..."
		mpv --ab-loop-a=no --ab-loop-b="$b" "$@" "$f1"
		return
	elif [ "$bb" -eq 0 ] ; then # b time unset
		a=$(lpat_a) # a time
		echo "$(scr1pt): Loop pattern: $(echo "$ab" | grep -oE "$lpat")" # update01: only pattern without a possible tag
		echo "$(scr1pt): Options: --start=$a --ab-loop-a=$a --ab-loop-b=no" "$@" # print MPV options
		echo "$(scr1pt): Starting mpv..."
		mpv --start="$a" --ab-loop-a="$a" --ab-loop-b=no "$@" "$f1"
		return
	fi
	a=$(lpat_a) # a time
	b=$(lpat_b) # b time
	echo "$(scr1pt): Loop pattern and duration: $(echo "$ab" | grep -oE "$lpat") ($(awk "BEGIN { print ( $bb * $sc ) - ( $aa * $sc ) }")s)" # update01: only pattern without a possible tag
	echo "$(scr1pt): Options: --start=$a --ab-loop-a=$a --ab-loop-b=$b" "$@" # print MPV options
	echo "$(scr1pt): Starting mpv..."
	mpv --start="$a" --ab-loop-a="$a" --ab-loop-b="$b" "$@" "$f1"
}

# playlist function where lines are parsed
core_ll() {
	for line in $(grep -v '[[:space:]]' "$loopfile" | paste -s) ; do # each line without whitespace
		f1="$(echo "$line" | cut -d "$d" -f 1)" # file
		if [ ! -f "$f1" ] || echo "$line" | grep -qv "$d" ; then # skip line without file or delimiter
			if [ ${#line} -gt 90 ] ; then
				echo >&2 "$(scr1pt): WARNING: No field separator or file - skipping: ${line:0:45}...${line: -45}" # 90 characters are printed
				continue
			else
				echo >&2 "$(scr1pt): WARNING: No field separator or file - skipping: $line"
				continue
			fi
		fi
		for ab in $(echo "$line" | cut -s -d "$d" -f 1 --complement | tr "$d" '\t') ; do # each loop pattern on each line
			if echo "$ab" | grep -qE \^"${lpat}" ; then # update01: pattern may be tagged
				aa=$(lpat_aa)
				bb=$(lpat_bb | grep -oE "[0-9]+") # update01: only deciseconds
				iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
				if (( iter>1 )) ; then
					uquit # not before the first file
					if [ "$?" -eq 1 ] ; then # skip the file
						iter=$(( iter - 1 ))
						break
					fi
				fi
				core "$@"
			else
				echo >&2 "$(scr1pt): WARNING: Invalid loop pattern - skipping: $ab"
				continue
			fi
		done
	done
}

if [ -e "$1" ] ; then # path (file or directory)
	swreq
	for f1 in "$@" ; do # input path
		if [ -d "$f1" ] ; then # directory
			if ! shopt -q globstar ; then
				gstar=1 # unset the option later
				shopt -qs globstar # recursive pathname expansion if an input directory
			else
				gstar=0
			fi
			f1a="$(realpath "$f1")" # resolved path
			for f1b in "${f1a}"/**/*.* ; do
				if basename "$f1b" | grep -oqE "${lpat}" ; then
					for ab in $(basename "$f1b" | grep -oE "${lpat}") ; do # each loop pattern in filename
						aa=$(lpat_aa)
						bb=$(lpat_bb)
						unset f1 # will allow file instead of directory into the core function
						f1="$f1b" # this file
						iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
						if (( iter>1 )) ; then
							uquit # not before the first file
							if [ "$?" -eq 1 ] ; then # skip the file
								iter=$(( iter - 1 ))
								break
							fi
						fi
						core
					done
				else
					echo >&2 "$(scr1pt): WARNING: No loop pattern - skipping: $(basename "$f1b")"
				fi
			done
			if [ "$gstar" -eq 1 ] ; then
				shopt -qu globstar
			fi
		elif [ -f "$f1" ] && basename "$f1" | grep -oqE "${lpat}" ; then # file
			for ab in $(basename "$f1" | grep -oE "${lpat}") ; do # each loop pattern in filename
				aa=$(lpat_aa)
				bb=$(lpat_bb)
				iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
				if (( iter>1 )) ; then
					uquit # not before the first file
					if [ "$?" -eq 1 ] ; then # skip the file
						iter=$(( iter - 1 ))
						break
					fi
				fi
				core
			done
		else
			echo >&2 "$(scr1pt): WARNING: No loop pattern - skipping: $(basename "$f1")"
		fi
	done
	echo "$(scr1pt): ${iter:-0} iterations completed - exiting..."
elif [ '--help' = "$1" ] ; then # help
	cat << '_EOF_'
MPVLOOP - run MPV with loop options set according to a pattern.

	SYNOPSIS
mpvloop {[<mpv profile,...>] [<loop pattern> | --ll] [path/]filename |
	--lpat <timestamp range>... | --help | --version}

	DESCRIPTION
MPVLOOP is a bash script that executes MPV with loop playback options set
according to a pattern in file names, a playlist or the command line.

MPV is run with any combination of the options: --start, --ab-loop-a,
--ab-loop-b, --loop-file.
MPV profile names are parsed and MPV is run according to: --profile.
MPV is only invoked to play a file with a loop pattern and is executed once for
each loop pattern; otherwise the files are skipped. Input directories are
expanded recursively. The line is read from left to right. If a key is pressed
within one second before MPV runs again, the script may exit or continue after
confirmation. Status messages report loop patterns and MPV options used, loop
duration, invalid inputs such as a file name without a pattern, and the number
of successful iterations.

	LOOP PATTERN
Recognized patterns are formed with an initial letter A followed by numbers next
to an intermediate letter B followed by numbers. Letters are matched regardless
of the case. Numbers are positive integers or zero and represent time in
deciseconds, that is, tenths of a second. Zero disables each time point.
Patterns are converted to seconds with one decimal place and translated into
time settings for loop playback from points A to B.

	Examples:
a1b2	(from 00:00:00.1 to 00:00:00.2)	(from 0.1 seconds to 0.2 seconds)
a10b20	(from 00:00:01 to 00:00:02)	(from 1 second to 2 seconds)
a0b123	(from 00:00:00 to 00:00:12.3)	(from start of file to 12.3 seconds)
a123b0	(from 00:00:12.3)		(from 12.3 seconds to end of file)
a0b0	(from 00:00:00)			(from start to end of file)

	For command line:
mpvloop foo-a1b2-a10b20.mp4
	How MPV is run:
mpv --start=0.1 --ab-loop-a=0.1 --ab-loop-b=0.2 foo-a1b2-a10b20.mp4 ; \
mpv --start=1 --ab-loop-a=1 --ab-loop-b=2 foo-a1b2-a10b20.mp4

	OPTIONS
MPV profile names and a single loop pattern without flags can be entered on the
command line. Usage is printed if no arguments are given.

	<mpv profile,...>
Name of the MPV profile to use.

	For command line:
mpvloop gpu-hq foo-a1b2.mp4
	How MPV is run:
mpv --start=0.1 --ab-loop-a=0.1 --ab-loop-b=0.2 --profile=gpu-hq foo-a1b2.mp4

	<loop pattern>
Play files according to this optional pattern. Other patterns in filenames, if
any, are ignored.

	For command line:
mpvloop a10b20 foo-a1b2.mp4
	How MPV is run:
mpv --start=1 --ab-loop-a=1 --ab-loop-b=2 foo-a1b2.mp4

	--ll file
Plaintext playlist with commas to separate a single file followed by any number
of associated patterns on each line. Patterns in filenames, if any, are ignored.
A line which does not satisfy all of the conditions below is also ignored:
- There is comma.
- There is loop pattern.
- There are no blank spaces.
- The first field is a regular file.

	For playlist file foo.txt which contains the following two lines:
path/to/foo1.mp4,a1b2,a123b0
foo2.mp4,a0b123

	How MPV is run:
mpv --start=0.1 --ab-loop-a=0.1 --ab-loop-b=0.2 path/to/foo1.mp4 ; \
mpv --start=12.3 --ab-loop-a=12.3 --ab-loop-b=no path/to/foo1.mp4 ; \
mpv --ab-loop-a=no --ab-loop-b=12.3 foo2.mp4

	--lpat <timestamp range>...
Print loop patterns equivalent to the timestamp ranges entered in any of the
following three formats. Decisecond place is optional. A single missing
timestamp translates to zero in the loop pattern:
1. HH:MM:SS[.n]-HH:MM:SS[.n]
2. HH:MM:SS[.n]-
3. -HH:MM:SS[.n]

	Example:
mpvloop --lpat '00:02:03.4-00:09:27.8' '-00:00:12.3' '00:00:12.3-'
a1234b5678	(00:02:03.4-00:09:27.8)
a0b123		(-00:00:12.3)
a123b0		(00:00:12.3-)

	--version
Display version information.

	--help
Print this help summary.

	DEPENDENCIES
Awk
file (command)
GNU Bourne-Again SHell (Bash)
GNU Coreutils (basename, cut, echo, paste, realpath, tail, tr, wc)
GNU Grep
mpv

	COPYRIGHT
Unlicense <http://unlicense.org/>
This is free and unencumbered software released into the public domain and
provided without warranty of any kind.

	SEE ALSO
	input.conf (MPV)
The last line will configure MPV to print the current playing time in seconds to
the terminal screen (stdout) in addition to setting or clearing loop points as
in the default configuration when the L key is pressed. If "{time-pos}" instead
of "{=time-pos}" is used, the playing time will be printed as a timestamp
instead of seconds.
l ab-loop ; print-text "ab-loop=${=time-pos}"
_EOF_
elif [ '--version' = "$1" ] ; then # version
	echo "mpvloop 0.7" # update01
elif [ '--lpat' = "$1" ] ; then # timestamp format conversion to loop pattern: HH:MM:SS[.n]-HH:MM:SS[.n]
	swreq
	if [ -n "$2" ] ; then
		shift # only input timestamps
		for tt in "$@" ; do
			if echo "$tt" | grep -qP '^[0-9][0-9]:[0-5][0-9]:[0-5][0-9](?:\.[0-9])?-[0-9][0-9]:[0-5][0-9]:[0-5][0-9](?:\.[0-9])?$' ; then
				ta=$(echo "$tt" | cut -d '-' -f 1)
				tb=$(echo "$tt" | cut -d '-' -f 2)
				lpat_ab="a$(lpat_tt "$ta")b$(lpat_tt "$tb")"
				if [ ${#lpat_ab} -lt 8 ] ; then
					echo -e "${lpat_ab}\t\t(${tt})"
				else
					echo -e "${lpat_ab}\t(${tt})"
				fi
			elif echo "$tt" | grep -qP '^[0-9][0-9]:[0-5][0-9]:[0-5][0-9](?:\.[0-9])?-$' ; then # HH:MM:SS[.n]-
				ta=$(echo "$tt" | cut -d '-' -f 1)
				lpat_ab="a$(lpat_tt "$ta")b0"
				if [ ${#lpat_ab} -lt 8 ] ; then
					echo -e "${lpat_ab}\t\t(${tt})"
				else
					echo -e "${lpat_ab}\t(${tt})"
				fi
			elif echo "$tt" | grep -qP '^-[0-9][0-9]:[0-5][0-9]:[0-5][0-9](?:\.[0-9])?$' ; then # -HH:MM:SS[.n]
				tb=$(echo "$tt" | cut -d '-' -f 2)
				lpat_ab="a0b$(lpat_tt "$tb")"
				if [ ${#lpat_ab} -lt 8 ] ; then
					echo -e "${lpat_ab}\t\t(${tt})"
				else
					echo -e "${lpat_ab}\t(${tt})"
				fi
			else
				echo >&2 "$(scr1pt): WARNING: Invalid timestamp format - skipping: $tt"
			fi
		done
	else
		echo "$(scr1pt): Usage: $(scr1pt) --lpat <HH:MM:SS[.n]-HH:MM:SS[.n] | HH:MM:SS[.n]- | -HH:MM:SS[.n]>..."
		echo "$(scr1pt): Help summary: $(scr1pt) --help"
	fi
elif [ '--ll' = "$1" ] ; then # looplist file
	swreq
	if [ "$#" -eq 2 ] && [ -r "$2" ] ; then
		if file -b --mime-type "$2" | grep -q 'text/plain' ; then # plain text file
			if grep -q '[^[:space:]]' < "$2" ; then # not empty
				loopfile="$2"
				core_ll
			else
				echo >&2 "$(scr1pt): WARNING: Empty file: $2"
				echo "$(scr1pt): Help summary: $(scr1pt) --help"
			fi
		else
			echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist: $2"
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
	else
		shift # only input path
		echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist:" "$@"
		echo "$(scr1pt): Help summary: $(scr1pt) --help"
	fi
	echo "$(scr1pt): ${iter:-0} iterations completed - exiting..."
elif [ '--ll' = "$2" ] ; then # profile + looplist file
	swreq
	if [ "$#" -eq 3 ] && [ -r "$3" ] ; then
		if file -b --mime-type "$3" | grep -q 'text/plain' ; then # plain text file
			if grep -q '[^[:space:]]' < "$3" ; then # not empty
				loopfile="$3"
				core_ll --profile="$1"
			else
				echo >&2 "$(scr1pt): WARNING: Empty file: $3"
				echo "$(scr1pt): Help summary: $(scr1pt) --help"
			fi
		else
			echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist: $3"
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
	else
		shift 2 # only input path
		echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist:" "$@"
		echo "$(scr1pt): Help summary: $(scr1pt) --help"
	fi
	echo "$(scr1pt): ${iter:-0} iterations completed - exiting..."
elif [ -e "$2" ] && echo "$1" | grep -oqE \^"${lpat}"\$ ; then # loop pattern + path (pattern in filename ignored)
	swreq
	ab="$1"
	aa=$(lpat_aa)
	bb=$(lpat_bb)
	shift # only input path
	for f1 in "$@" ; do # input path
		if [ -d "$f1" ] ; then # directory
			if ! shopt -q globstar ; then
				gstar=1 # unset the option later
				shopt -qs globstar # recursive pathname expansion if an input directory
			else
				gstar=0
			fi
			f1a="$(realpath "$f1")" # resolved path
			for f1b in "${f1a}"/**/*.* ; do
				unset f1 # will allow file instead of directory into the core function
				f1="$f1b" # this file
				iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
				if (( iter>1 )) ; then
					uquit # not before the first file
					if [ "$?" -eq 1 ] ; then # skip the file
						iter=$(( iter - 1 ))
						continue
					fi
				fi
				core
			done
			if [ "$gstar" -eq 1 ] ; then
				shopt -qu globstar
			fi
		elif [ -f "$f1" ] ; then
			iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
			if (( iter>1 )) ; then
				uquit # not before the first file
				if [ "$?" -eq 1 ] ; then # skip the file
					iter=$(( iter - 1 ))
					continue
				fi
			fi
			core
		fi
	done
	echo "$(scr1pt): ${iter:-0} iterations completed - exiting..."
elif [ ! -e "$1" ] && [ -e "$2" ] ; then # profile + path
	swreq
	profile="$1"
	shift # only input path
	for f1 in "$@" ; do # input path
		if [ -d "$f1" ] ; then # directory
			if ! shopt -q globstar ; then
				gstar=1 # unset the option later
				shopt -qs globstar # recursive pathname expansion if an input directory
			else
				gstar=0
			fi
			f1a="$(realpath "$f1")" # resolved path
			for f1b in "${f1a}"/**/*.* ; do
				if basename "$f1b" | grep -oqE "${lpat}" ; then
					for ab in $(basename "$f1b" | grep -oE "${lpat}") ; do # each loop pattern in filename
						aa=$(lpat_aa)
						bb=$(lpat_bb)
						unset f1 # will allow file instead of directory into the core function
						f1="$f1b" # this file
						iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
						if (( iter>1 )) ; then
							uquit # not before the first file
							if [ "$?" -eq 1 ] ; then # skip the file
								iter=$(( iter - 1 ))
								break
							fi
						fi
						core --profile="$profile"
					done
				else
					echo >&2 "$(scr1pt): WARNING: No loop pattern - skipping: $(basename "$f1b")"
				fi
			done
			if [ "$gstar" -eq 1 ] ; then
				shopt -qu globstar
			fi
		elif [ -f "$f1" ] && basename "$f1" | grep -oqE "${lpat}" ; then # file
			for ab in $(basename "$f1" | grep -oE "${lpat}") ; do # each loop pattern in filename
				aa=$(lpat_aa)
				bb=$(lpat_bb)
				iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
				if (( iter>1 )) ; then
					uquit # not before the first file
					if [ "$?" -eq 1 ] ; then # skip the file
						iter=$(( iter - 1 ))
						break
					fi
				fi
				core --profile="$profile"
			done
		else
			echo >&2 "$(scr1pt): WARNING: No loop pattern - skipping: $(basename "$f1")"
		fi
	done
	echo "$(scr1pt): ${iter:-0} iterations completed - exiting..."
elif [ -e "$3" ] && echo "$2" | grep -oqE \^"${lpat}"\$ || echo "$1" | grep -oqE \^"${lpat}"\$ && [ ! -e "$2" ] ; then # profile + clip pattern + path (update01)
	swreq
	for arg in "$1" "$2" ; do # update01
		iterin=$(( ${iterin:-0} + 1 )) # options iteration counter
		if [ -n "$profile" ] ; then
			ab="$arg" # define loop pattern if MPV profile defined already
		elif echo "$arg" | grep -oqE \^"${lpat}"\$ ; then
			if [ "$iterin" -eq 1 ] ; then
				ab="$arg" # define loop pattern if first iteration and no MPV profile
			fi
		else
			if [ -z "$profile" ] ; then
				profile="$arg" # define MPV profile
			fi
		fi
	done
	aa=$(lpat_aa)
	bb=$(lpat_bb)
	shift 2 # only input path
	for f1 in "$@" ; do # input path
		if [ -d "$f1" ] ; then # directory
			if ! shopt -q globstar ; then
				gstar=1 # unset the option later
				shopt -qs globstar # recursive pathname expansion if an input directory
			else
				gstar=0
			fi
			f1a="$(realpath "$f1")" # resolved path
			for f1b in "${f1a}"/**/*.* ; do
				unset f1 # will allow file instead of directory into the core function
				f1="$f1b" # this file
				iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
				if (( iter>1 )) ; then
					uquit # not before the first file
					if [ "$?" -eq 1 ] ; then # skip the file
						iter=$(( iter - 1 ))
						continue
					fi
				fi
				core --profile="$profile"
			done
			if [ "$gstar" -eq 1 ] ; then
				shopt -qu globstar
			fi
		elif [ -f "$f1" ] ; then
			iter=$(( ${iter:-0} + 1 )) # forloop iteration counter
			if (( iter>1 )) ; then
				uquit # not before the first file
				if [ "$?" -eq 1 ] ; then # skip the file
					iter=$(( iter - 1 ))
					continue
				fi
			fi
			core --profile="$profile"
		else # update01
			echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
	done
	echo "$(scr1pt): ${iter:-0} iterations completed - exiting..."
elif [ "$#" -eq 0 ] ; then
	echo "$(scr1pt): Usage: $(scr1pt) {[<mpv profile,...>] [<loop pattern> | --ll] [path/]filename | --lpat <timestamp range>... | --help | --version}"
else
	echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
	echo "$(scr1pt): Help summary: $(scr1pt) --help"
fi
