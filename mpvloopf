#!/bin/bash

# MPVLOOPF - run MPVLOOP to play tagged loops
# SPDX-License-Identifier: Unlicense
#
# This small work is dedicated to all those helping to protect endangered species.
# 2024 Looper Guar√°

_mpvloop=mpvloop # as the shell should invoke mpvloop
lpat="[aA][0-9]+[bB][0-9]+" # loop pattern is a regex to match A number B number
q=1 # time in seconds to press any key and quit the script
d=, # playlist fields delimiter

# this script
scr1pt() {
basename "$0"
}

if [ "$#" -eq 0 ] ; then
	echo "$(scr1pt): Usage: $(scr1pt) {[<mpv profile,...>] <tag> [-p <pattern> | --ll] [path/]filename | --help | --version}"
	exit
elif [ '--help' = "$1" ] ; then
	cat << '_EOF_'
MPVLOOPF - run MPVLOOP to play tagged loops

	SYNOPSIS
mpvloopf {[<mpv profile,...>] <tag> [-p <pattern> | --ll] [path/]filename |
	 --help | --version}

	DESCRIPTION
Once for each tagged loop pattern associated with a file and optionally a path
pattern and MPV profile:
MPVLOOPF executes MPVLOOP; the file plays according to the tagged pattern.
Entered directories are searched recursively. The line is read from left to
right. If a key is pressed within one second before MPVLOOP is executed again,
the script may exit or continue after confirmation.
Status messages report the specified tag, invalid inputs, and the number of
successful iterations.

	TAGGED LOOP PATTERN
A tag is defined if a match to a regular expression specified on the command
line is found at the end of a loop pattern in file names or a playlist.

	OPTIONS
MPV profile names and a single tag without flags can be entered on the command
line. Usage is printed if no arguments are given.

	<tag>
Search input directories, file names, or a playlist for a match to tag at the
end of a loop pattern. Tag, as specified on the command line, is a regular
expression. Found loops are played sequentially.

	For command line:
mpvloopf Earth path/to
	How MPVLOOP is run:
mpvloop a12b34 path/to/foo-a12b34Earth-a23b45Mars.mp4

	-p <pattern>
Compares the pattern with the concatenation of a directory name and the base
name of the file. The test applies to the full path.

	For command line:
mpvloopf Earth -p "*Saturn*" path/to
	How MPVLOOP is run:
mpvloop a12b34 path/to/Saturn/foo-a12b34Earth-a23b45Mars.mp4 ; \
mpvloop a12b34 path/to/foo-a12b34Earth-a23b45Mars-a34b56Saturn.mp4

	<mpv profile,...>
Name of the MPV profile to use.

	For command line:
mpvloopf gpu-hq Pluto path/to
	How MPVLOOP is run:
mpvloop a1b2 --profile=gpu-hq path/to/foo-a1b2Pluto.mp4

	--ll file
Plaintext playlist with commas to separate a single file followed by any number
of associated patterns on each line. A tagged loop plays if it matches the
specified tag. Patterns in file names, if any, are ignored.
A line which does not satisfy all of the conditions below is also ignored:
- There is comma.
- There is loop pattern.
- There are no blank spaces.
- The first field is a regular file.

	For playlist file foo.txt which contains the following two lines:
path/to/foo1.mp4,a1b2Neptune,a123b0
foo2.mp4,a0b123Neptune

	How MPVLOOP is run:
mpvloop a1b2 path/to/foo1.mp4 ; mpvloop a0b123 foo2.mp4

	--version
Display version information.

	--help
Print help summary.

	DEPENDENCIES
file (command)
GNU Bourne-Again SHell (Bash)
GNU Coreutils (basename, cut, echo, tr)
GNU Findutils (find)
GNU Grep
mpv
mpvloop (in a $PATH location)

	COPYRIGHT
Unlicense <http://unlicense.org/>
This is free and unencumbered software released into the public domain and
provided without warranty of any kind.
_EOF_
	exit
elif [ '--version' = "$1" ] ; then
	echo "mpvloopf 0.2"
	exit
fi

# required software
swreq() {
type "$_mpvloop" >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: MPVLOOP not found - aborting."; exit 1; }
type find >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: FIND not found - aborting."; exit 1; }
type grep >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: GREP not found - aborting."; exit 1; }
type file >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: FILE (command) not found - aborting."; exit 1; }
type mpv >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: MPV not found - aborting."; exit 1; }
}

# wait and confirm to quit the script
uquit() {
echo "$(scr1pt): INFO: Press any key to quit"
read -rst "$q" -N 1
if [ "$?" -eq 0 ] ; then
	echo "$(scr1pt): Please confirm (1/2)"
	select c in "Yes" "No" ; do
		case "$c" in
			'Yes' ) echo "$(scr1pt): $(( iterout - 1 )) successful iterations - exiting..." ; exit;;
			'No' ) break;;
		esac
	done 2>&1
fi
}

# playlist function where lines are parsed
core_ll() {
for line in $(grep -v '[[:space:]]' "$loopfile" | paste -s) ; do # each line without whitespace
	f1="$(echo "$line" | cut -d "$d" -f 1)" # file
	if [ ! -f "$f1" ] || echo "$line" | grep -qv "$d" ; then # skip line without file or delimiter
		if [ ${#line} -gt 90 ] ; then
			echo >&2 "$(scr1pt): WARNING: No field separator or file - skipping: ${line:0:45}...${line: -45}" # 90 characters are printed
			continue
		else
			echo >&2 "$(scr1pt): WARNING: No field separator or file - skipping: $line"
			continue
		fi
	fi
	for ab2 in $(echo "$line" | cut -s -d "$d" -f 1 --complement | tr "$d" '\t') ; do # each loop pattern on each line
		if echo "$ab2" | grep -qoE \^"${lpat}${ltag}"\$ ; then
			ab=$(echo "$ab2" | grep -oE "$lpat")
			iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
			if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
				uquit
			fi
			echo "$(scr1pt): Loop tag: $ltag"
			echo "$(scr1pt): Starting ${_mpvloop}..."
			"$_mpvloop" "$@" "$ab" "$f1"
		else
			echo >&2 "$(scr1pt): WARNING: Invalid loop pattern - skipping: $ab2"
			continue
		fi
	done
done
}

if [ ! -e "$1" ] ; then
	swreq
	if [ '--ll' = "$2" ] ; then # loop tag + playlist file
		if [ "$#" -eq 3 ] && [ -r "$3" ] ; then
			if file -b --mime-type "$3" | grep -q 'text/plain' ; then # plain text file
				if grep -q '[^[:space:]]' < "$3" ; then # not empty
					ltag="$1"
					loopfile="$3"
					core_ll
				else
					echo >&2 "$(scr1pt): WARNING: Empty file: $3"
					echo "$(scr1pt): Help summary: $(scr1pt) --help"
				fi
			else
				echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist: $3"
				echo "$(scr1pt): Help summary: $(scr1pt) --help"
			fi
		else
			shift 2 # only input path
			echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist:" "$@"
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
		echo "$(scr1pt): ${iterout:-0} successful iterations - exiting..."
	elif [ '-p' = "$2" ] && [ -e "$4" ] ; then # loop tag + path pattern + pathname
		ltag="$1" # define loop tag
		ppat="$3" # define path pattern
		shift 3 # input directories only
		for f3 in "$@" ; do
			if [ -d "$f3" ] ; then
				readarray -t f2 <<< "$(find "$f3" -path "$ppat" -regex '.*'"${lpat}${ltag}"'.*' -type f)" # whitespace won't split filenames in forloop
				if [ -n "$f2" ] ; then # test find for a single valid result
					for f1 in "${f2[@]}" ; do
						if basename "$f1" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
							for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
								iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
								if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
									uquit
								fi
								echo "$(scr1pt): Loop tag: $ltag"
								echo "$(scr1pt): Starting ${_mpvloop}..."
								"$_mpvloop" "$ab" "$f1"
							done
						fi
					done
				else
					echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
				fi
			elif [ -f "$f3" ] && basename "$f3" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
				for ab in $(basename "$f3" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
					iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
					if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
						uquit
					fi
					echo "$(scr1pt): Loop tag: $ltag"
					echo "$(scr1pt): Starting ${_mpvloop}..."
					"$_mpvloop" "$ab" "$f3"
				done
			else
				echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
			fi
		done
		echo "$(scr1pt): ${iterout:-0} successful iterations - exiting..."
	elif [ '--ll' = "$3" ] ; then # profile + loop tag + playlist file
		if [ "$#" -eq 4 ] && [ -r "$4" ] ; then
			if file -b --mime-type "$4" | grep -q 'text/plain' ; then # plain text file
				if grep -q '[^[:space:]]' < "$4" ; then # not empty
					for arg in "$1" "$2" ; do
						iterin=$(( ${iterin:-0} + 1 )) # options iteration counter
						if [ -n "$prf" ] ; then
							ltag="$arg" # define loop tag if MPV profile defined already
						elif mpv --show-profile\="$(echo "$arg" | cut -d ',' -f 1)" | grep -qi 'unknown' ; then
							if [ "$iterin" -eq 1 ] ; then
								ltag="$arg" # define loop tag if first iteration and no MPV profile
							else
								if [ -n "$ltag" ] ; then
									echo >&2 "$(scr1pt): WARNING: Cannot define MPV profile - aborting."
									echo "$(scr1pt): Help summary: $(scr1pt) --help"
									exit 1 # no MPV profile entered
								fi
							fi
						else
							if [ -z "$prf" ] ; then
								prf="$arg" # define MPV profile
							fi
						fi
					done
					loopfile="$4"
					core_ll "$prf"
				else
					echo >&2 "$(scr1pt): WARNING: Empty file: $4"
					echo "$(scr1pt): Help summary: $(scr1pt) --help"
				fi
			else
				echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist: $4"
				echo "$(scr1pt): Help summary: $(scr1pt) --help"
			fi
		else
			shift 3 # only input path
			echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist:" "$@"
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
		echo "$(scr1pt): ${iterout:-0} successful iterations - exiting..."
	elif [ '-p' = "$3" ] && [ -e "$5" ] ; then # profile + loop tag + path pattern + pathname
		ppat="$4" # define path pattern
		for arg in "$1" "$2" ; do
			iterin=$(( ${iterin:-0} + 1 )) # options iteration counter
			if [ -n "$prf" ] ; then
				ltag="$arg" # define loop tag if MPV profile defined already
			elif mpv --show-profile\="$(echo "$arg" | cut -d ',' -f 1)" | grep -qi 'unknown' ; then
				if [ "$iterin" -eq 1 ] ; then
					ltag="$arg" # define loop tag if first iteration and no MPV profile
				else
					if [ -n "$ltag" ] ; then
						echo >&2 "$(scr1pt): WARNING: Cannot define MPV profile - aborting."
						echo "$(scr1pt): Help summary: $(scr1pt) --help"
						exit 1 # no MPV profile entered
					fi
				fi
			else
				if [ -z "$prf" ] ; then
					prf="$arg" # define MPV profile
				fi
			fi
		done
		shift 4 # input directories only
		for f3 in "$@" ; do
			if [ -d "$f3" ] ; then
				readarray -t f2 <<< "$(find "$f3" -path "$ppat" -regex '.*'"${lpat}${ltag}"'.*' -type f)" # whitespace won't split filenames in forloop
				if [ -n "$f2" ] ; then # test find for a single valid result
					for f1 in "${f2[@]}" ; do
						if basename "$f1" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
							for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
								iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
								if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
									uquit
								fi
								echo "$(scr1pt): Loop tag: $ltag"
								echo "$(scr1pt): Starting ${_mpvloop}..."
								"$_mpvloop" "$prf" "$ab" "$f1"
							done
						fi
					done
				else
					echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
				fi
			elif [ -f "$f3" ] && basename "$f3" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
				for ab in $(basename "$f3" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
					iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
					if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
						uquit
					fi
					echo "$(scr1pt): Loop tag: $ltag"
					echo "$(scr1pt): Starting ${_mpvloop}..."
					"$_mpvloop" "$prf" "$ab" "$f3"
				done
			else
				echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
			fi
		done
		echo "$(scr1pt): ${iterout:-0} successful iterations - exiting..."
	elif [ ! -e "$2" ] && [ -e "$3" ] ; then # profile + loop tag
		for arg in "$1" "$2" ; do
			iterin=$(( ${iterin:-0} + 1 )) # options iteration counter
			if [ -n "$prf" ] ; then
				ltag="$arg" # define loop tag if MPV profile defined already
			elif mpv --show-profile\="$(echo "$arg" | cut -d ',' -f 1)" | grep -qi 'unknown' ; then
				if [ "$iterin" -eq 1 ] ; then
					ltag="$arg" # define loop tag if first iteration and no MPV profile
				else
					if [ -n "$ltag" ] ; then
						echo >&2 "$(scr1pt): WARNING: Cannot define MPV profile - aborting."
						echo "$(scr1pt): Help summary: $(scr1pt) --help"
						exit 1 # no MPV profile entered
					fi
				fi
			else
				if [ -z "$prf" ] ; then
					prf="$arg" # define MPV profile
				fi
			fi
		done
		shift 2 # input directories only
		for f3 in "$@" ; do
			if [ -d "$f3" ] ; then
				readarray -t f2 <<< "$(find "$f3" -regex '.*'"${lpat}${ltag}"'.*' -type f)" # whitespace won't split filenames in forloop
				if [ -n "$f2" ] ; then # test find for a single valid result
					for f1 in "${f2[@]}" ; do
						if basename "$f1" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
							for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
								iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
								if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
									uquit
								fi
								echo "$(scr1pt): Loop tag: $ltag"
								echo "$(scr1pt): Starting ${_mpvloop}..."
								"$_mpvloop" "$prf" "$ab" "$f1"
							done
						fi
					done
				else
					echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
				fi
			elif [ -f "$f3" ] && basename "$f3" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
				for ab in $(basename "$f3" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
					iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
					if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
						uquit
					fi
					echo "$(scr1pt): Loop tag: $ltag"
					echo "$(scr1pt): Starting ${_mpvloop}..."
					"$_mpvloop" "$prf" "$ab" "$f3"
				done
			else
				echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
			fi
		done
		echo "$(scr1pt): ${iterout:-0} successful iterations - exiting..."
	elif [ -e "$2" ] ; then # loop tag + pathname
		ltag="$1" # define loop tag
		shift 1 # input directories only
		for f3 in "$@" ; do
			if [ -d "$f3" ] ; then
				readarray -t f2 <<< "$(find "$f3" -regex '.*'"${lpat}${ltag}"'.*' -type f)" # whitespace won't split filenames in forloop
				if [ -n "$f2" ] ; then # test find for a single valid result
					for f1 in "${f2[@]}" ; do
						if basename "$f1" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
							for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
								iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
								if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
									uquit
								fi
								echo "$(scr1pt): Loop tag: $ltag"
								echo "$(scr1pt): Starting ${_mpvloop}..."
								"$_mpvloop" "$ab" "$f1"
							done
						fi
					done
				else
					echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
				fi
			elif [ -f "$f3" ] && basename "$f3" | grep -qE "${lpat}${ltag}" ; then # tagged pattern in filename
				for ab in $(basename "$f3" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do # each valid loop pattern in filename
					iterout=$(( ${iterout:-0} + 1 )) # forloop iteration counter
					if [ "$iterout" -ne 1 ] ; then # no quit function in first iteration
						uquit
					fi
					echo "$(scr1pt): Loop tag: $ltag"
					echo "$(scr1pt): Starting ${_mpvloop}..."
					"$_mpvloop" "$ab" "$f3"
				done
			else
				echo >&2 "$(scr1pt): WARNING: Tag not found - skipping: $f3"
			fi
		done
		echo "$(scr1pt): ${iterout:-0} successful iterations - exiting..."
	else
		echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
		echo "$(scr1pt): Help summary: $(scr1pt) --help"
	fi
else
	echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
	echo "$(scr1pt): Help summary: $(scr1pt) --help"
fi
