#!/bin/bash

# MPVLOOPF - run MPVLOOP to play tagged loops.
# SPDX-License-Identifier: Unlicense
#
# This small work is dedicated to all those helping to protect endangered species.
# 2024 Looper Guar√°

# How the shell should call MPVLOOP
_mpvloop=mpvloop

# Regular expression to match a clip pattern
# lowercase letters only: a[0-9]+b[0-9]+
# uppercase letters only: A[0-9]+B[0-9]+
# case insensitive: [aA][0-9]+[bB][0-9]+
lpat="[aA][0-9]+[bB][0-9]+"

# Time in seconds to press any key and exit the script
# half a second: 0.5
q=1

# Field delimiter in a playlist
d=,

scr1pt() {
	basename "$0"
}

if [ "$#" -eq 0 ] ; then
	echo "$(scr1pt): Usage: $(scr1pt) {[<mpv profile,...>] <tag> [-p <pattern> | -l] [-s] [path/]filename | --help | --version}"
	exit
elif [ '--help' = "$1" ] ; then
	cat << '_EOF_'
MPVLOOPF - run MPVLOOP to play tagged loops

	SYNOPSIS
mpvloopf {[<mpv profile,...>] <tag> [-p <pattern> | -l] [-s] [path/]filename |
	 --help | --version}

	DESCRIPTION
Once for each tagged loop pattern associated with a file and optionally a path
pattern and MPV profile:
MPVLOOPF executes MPVLOOP; the file plays according to the tagged pattern.
Entered directories are searched recursively. The line is read from left to
right. If a key is pressed within one second before MPVLOOP is executed again,
the script may exit or continue after confirmation.
Status messages report the specified tag, invalid inputs, and the number of
successful iterations.

	TAGGED LOOP PATTERN
A tag is defined if a match to a regular expression specified on the command
line is found at the end of a loop pattern in file names or a playlist.

	OPTIONS
MPV profile names and a single tag without flags can be entered on the command
line. Usage is printed if no arguments are given.

	<tag>
Search input directories, file names, or a playlist for a match to tag at the
end of a loop pattern. Tag, as specified on the command line, is a regular
expression. Found loops are played sequentially.

	For command line:
mpvloopf Earth path/to
	How MPVLOOP is run:
mpvloop a12b34 path/to/foo-a12b34Earth-a23b45Mars.mp4

	-p <pattern>
Compares a shell pattern with the concatenation of a directory name and the base
name of the file. The test applies to the full path.

	For command line:
mpvloopf Earth -p Saturn path/to
	How MPVLOOP is run:
mpvloop a12b34 path/to/Saturn/foo-a12b34Earth-a23b45Mars.mp4 ; \
mpvloop a12b34 path/to/foo-a12b34Earth-a23b45Mars-a34b56Saturn.mp4

	<mpv profile,...>
Name of the MPV profile to use.

	For command line:
mpvloopf gpu-hq Pluto path/to
	How MPVLOOP is run:
mpvloop a1b2 --profile=gpu-hq path/to/foo-a1b2Pluto.mp4

	-l file
Plaintext playlist with commas to separate a single file followed by any number
of associated patterns on each line. A tagged loop plays if it matches the
specified tag. Patterns in file names, if any, are ignored.
A line which does not satisfy all of the conditions below is also ignored:
- There is comma.
- There is loop pattern.
- The first field is a regular file.

	For playlist file foo.txt which contains the following two lines:
path/to/foo1.mp4,a1b2Neptune,a123b0
foo2.mp4,a0b123Neptune

	How MPVLOOP is run:
mpvloop a1b2 path/to/foo1.mp4 ; mpvloop a0b123 foo2.mp4

	-s file
Shuffle the file list. With -l, options must be combined in any order, for
example: -ls.

	--version
Display version information.

	--help
Print help summary.

	DEPENDENCIES
file (command)
GNU Bourne-Again SHell (Bash)
GNU Coreutils
GNU Findutils (find)
GNU Grep
mpv
mpvloop (in a $PATH location)

	COPYRIGHT
Unlicense <http://unlicense.org/>
This is free and unencumbered software released into the public domain and
provided without warranty of any kind.
_EOF_
	exit
elif [ '--version' = "$1" ] ; then
	echo "mpvloopf 1.0"
	exit
fi

swreq() {
	type "$_mpvloop" >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: MPVLOOP not found - aborting."; exit 1; }
	type find >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: FIND not found - aborting."; exit 1; }
	type grep >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: GREP not found - aborting."; exit 1; }
	type file >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: FILE (command) not found - aborting."; exit 1; }
	type mpv >/dev/null 2>&1 || { echo >&2 "${0}: WARNING: MPV not found - aborting."; exit 1; }
}

uquit() {
	echo "$(scr1pt): INFO: Press any key to exit the script or skip the file."
	if read -rst "$q" -N 1 ; then
		echo "$(scr1pt): File: $f1"
		echo "$(scr1pt): Please confirm:"
		select ans in "EXIT the script" "SKIP file" "Cancel" ; do
			case "$ans" in
				'EXIT the script' )
					echo "$(scr1pt): $((iterout - 1)) iterations completed - exiting..."
					exit;;
				'SKIP file' )
					return 1;;
				'Cancel' )
					break;;
			esac
		done 2>&1
	fi
	echo
}

core_ll() {
	if [ -v shuffle ] ; then
		readarray -t iall1 < <(shuf "$loopfile")
	else
		readarray -t iall1 < <(cat "$loopfile")
	fi
	for line in "${iall1[@]}" ; do
		f1="$(cut -d "$d" -f 1 <<< "$line")"
		if [ ! -f "$f1" ] || grep -qv "$d" <<< "$line" ; then
			if [ ${#line} -gt 90 ] ; then
				echo >&2 "$(scr1pt): WARNING: No field separator or file - skipping: ${line:0:45}...${line: -45}"
				continue
			else
				echo >&2 "$(scr1pt): WARNING: No field separator or file - skipping: $line"
				continue
			fi
		fi
		for ab2 in $(cut -s -d "$d" -f 1 --complement <<< "$line" | tr "$d" '\t') ; do
			if grep -qoE ^"${lpat}${ltag}"\$ <<< "$ab2" ; then
				ab=$(grep -oE "$lpat" <<< "$ab2")
				iterout=$((iterout + 1))
				if ((iterout > 1)) ; then
					uquit
					if [ "$?" -eq 1 ] ; then
						iterout=$((iterout - 1))
						continue 2
					fi
				fi
				echo "$(scr1pt): Loop tag: $ltag"
				echo "$(scr1pt): Starting ${_mpvloop}..."
				"$_mpvloop" "$@" "$ab" "$f1"
			else
				continue
			fi
		done
	done
}

if [ ! -e "$1" ] ; then
	swreq
	if [ '-l' = "$2" ] || [ '-ls' = "$2" ] || [ '-sl' = "$2" ] ; then
		if [ "$#" -eq 3 ] && [ -r "$3" ] ; then
			if file -b --mime-type "$3" | grep -q 'text/plain' ; then
				if grep -q '[^[:space:]]' < "$3" ; then
					ltag="$1"
					loopfile="$3"
					if [ '-ls' = "$2" ] || [ '-sl' = "$2" ] ; then
						shuffle=y
					fi
					core_ll
				else
					echo >&2 "$(scr1pt): WARNING: Empty file: $3"
					echo "$(scr1pt): Help summary: $(scr1pt) --help"
				fi
			else
				echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist: $3"
				echo "$(scr1pt): Help summary: $(scr1pt) --help"
			fi
		else
			shift 2
			echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist:" "$@"
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
		if [ -v iterout ] ; then
			echo "$(scr1pt): $iterout iterations completed - exiting..."
		else
			echo >&2 "$(scr1pt): WARNING: Tag or pattern not found - exiting..."
		fi
	elif [ '-p' = "$2" ] && [ -e "$4" ] || [ '-s' = "$4" ] ; then
		ltag="$1"
		ppat="$3"
		if [ '-s' = "$4" ] ; then
			shuffle=y
			shift 4
		else
			shift 3
		fi
		iall3+=("$@")
		if [ -v iall3 ] ; then
			for f2 in "${iall3[@]}" ; do
				if [ -d "$f2" ] ; then
					readarray -t f3 < <(find "$f2" -path "*${ppat}*" -regex '.*'"${lpat}${ltag}"'.*' -type f)
					if [ -n "${f3[0]}" ] ; then
						iall2+=("${f3[@]}")
					else
						continue
					fi
				elif [ -f "$f2" ] ; then
					if basename "$f2" | grep -qE "${lpat}${ltag}" && realpath -q "$f2" | grep -qF "$ppat" ; then
						iall2+=("$f2")
					else
						continue
					fi
				else
					echo >&2 "$(scr1pt): WARNING: No such file or directory - skipping: $f2"
				fi
			done
			if [ -v shuffle ] ; then
				readarray -t iall1 < <(shuf -e "${iall2[@]}")
			else
				iall1+=("${iall2[@]}")
			fi
		else
			echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
			exit 1
		fi
		for f1 in "${iall1[@]}" ; do
			for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do
				iterout=$((iterout + 1))
				if ((iterout > 1)) ; then
					uquit
					if [ "$?" -eq 1 ] ; then
						iterout=$((iterout - 1))
						continue 2
					fi
				fi
				echo "$(scr1pt): Loop tag: $ltag"
				echo "$(scr1pt): Starting ${_mpvloop}..."
				"$_mpvloop" "$ab" "$f1"
			done
		done
		if [ -v iterout ] ; then
			echo "$(scr1pt): $iterout iterations completed - exiting..."
		else
			echo >&2 "$(scr1pt): WARNING: Tag or pattern not found - exiting..."
		fi
	elif [ '-l' = "$3" ] || [ '-ls' = "$3" ] || [ '-sl' = "$3" ] ; then
		if [ "$#" -eq 4 ] && [ -r "$4" ] ; then
			if file -b --mime-type "$4" | grep -q 'text/plain' ; then
				if grep -q '[^[:space:]]' < "$4" ; then
					for arg in "$1" "$2" ; do
						iterin=$((iterin + 1))
						if [ -n "$prf" ] ; then
							ltag="$arg"
						elif mpv --show-profile="$(cut -d ',' -f 1 <<< "$arg")" | grep -qi 'unknown' ; then
							if [ "$iterin" -eq 1 ] ; then
								ltag="$arg"
							else
								if [ -n "$ltag" ] ; then
									echo >&2 "$(scr1pt): WARNING: Cannot define MPV profile - aborting."
									echo "$(scr1pt): Help summary: $(scr1pt) --help"
									exit 1
								fi
							fi
						else
							if [ -z "$prf" ] ; then
								prf="$arg"
							fi
						fi
					done
					loopfile="$4"
					if [ '-ls' = "$3" ] || [ '-sl' = "$3" ] ; then
						shuffle=y
					fi
					core_ll "$prf"
				else
					echo >&2 "$(scr1pt): WARNING: Empty file: $4"
					echo "$(scr1pt): Help summary: $(scr1pt) --help"
				fi
			else
				echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist: $4"
				echo "$(scr1pt): Help summary: $(scr1pt) --help"
			fi
		else
			shift 3
			echo >&2 "$(scr1pt): WARNING: A single plaintext file is expected for playlist:" "$@"
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
		fi
		if [ -v iterout ] ; then
			echo "$(scr1pt): $iterout iterations completed - exiting..."
		else
			echo >&2 "$(scr1pt): WARNING: Tag or pattern not found - exiting..."
		fi
	elif [ '-p' = "$3" ] && [ -e "$5" ] || [ '-s' = "$5" ] ; then
		ppat="$4"
		for arg in "$1" "$2" ; do
			iterin=$((iterin + 1))
			if [ -n "$prf" ] ; then
				ltag="$arg"
			elif mpv --show-profile="$(cut -d ',' -f 1 <<< "$arg")" | grep -qi 'unknown' ; then
				if [ "$iterin" -eq 1 ] ; then
					ltag="$arg"
				else
					if [ -n "$ltag" ] ; then
						echo >&2 "$(scr1pt): WARNING: Cannot define MPV profile - aborting."
						echo "$(scr1pt): Help summary: $(scr1pt) --help"
						exit 1
					fi
				fi
			else
				if [ -z "$prf" ] ; then
					prf="$arg"
				fi
			fi
		done
		if [ '-s' = "$5" ] ; then
			shuffle=y
			shift 5
		else
			shift 4
		fi
		iall3+=("$@")
		if [ -v iall3 ] ; then
			for f2 in "${iall3[@]}" ; do
				if [ -d "$f2" ] ; then
					readarray -t f3 < <(find "$f2" -path "*${ppat}*" -regex '.*'"${lpat}${ltag}"'.*' -type f)
					if [ -n "${f3[0]}" ] ; then
						iall2+=("${f3[@]}")
					else
						continue
					fi
				elif [ -f "$f2" ] ; then
					if basename "$f2" | grep -qE "${lpat}${ltag}" && realpath -q "$f2" | grep -qF "$ppat" ; then
						iall2+=("$f2")
					else
						continue
					fi
				else
					echo >&2 "$(scr1pt): WARNING: No such file or directory - skipping: $f2"
				fi
			done
			if [ -v shuffle ] ; then
				readarray -t iall1 < <(shuf -e "${iall2[@]}")
			else
				iall1+=("${iall2[@]}")
			fi
		else
			echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
			exit 1
		fi
		for f1 in "${iall1[@]}" ; do
			for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do
				iterout=$((iterout + 1))
				if ((iterout > 1)) ; then
					uquit
					if [ "$?" -eq 1 ] ; then
						iterout=$((iterout - 1))
						continue 2
					fi
				fi
				echo "$(scr1pt): Loop tag: $ltag"
				echo "$(scr1pt): Starting ${_mpvloop}..."
				"$_mpvloop" "$prf" "$ab" "$f1"
			done
		done
		if [ -v iterout ] ; then
			echo "$(scr1pt): $iterout iterations completed - exiting..."
		else
			echo >&2 "$(scr1pt): WARNING: Tag or pattern not found - exiting..."
		fi
	elif [ -e "$2" ] || [ '-s' = "$2" ] ; then
		ltag="$1"
		if [ '-s' = "$2" ] ; then
			shuffle=y
			shift 2
		else
			shift
		fi
		iall3+=("$@")
		if [ -v iall3 ] ; then
			for f2 in "${iall3[@]}" ; do
				if [ -d "$f2" ] ; then
					readarray -t f3 < <(find "$f2" -regex '.*'"${lpat}${ltag}"'.*' -type f)
					if [ -n "${f3[0]}" ] ; then
						iall2+=("${f3[@]}")
					else
						continue
					fi
				elif [ -f "$f2" ] ; then
					if basename "$f2" | grep -qE "${lpat}${ltag}" ; then
						iall2+=("$f2")
					else
						continue
					fi
				else
					echo >&2 "$(scr1pt): WARNING: No such file or directory - skipping: $f2"
				fi
			done
			if [ -v shuffle ] ; then
				readarray -t iall1 < <(shuf -e "${iall2[@]}")
			else
				iall1+=("${iall2[@]}")
			fi
		else
			echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
			exit 1
		fi
		for f1 in "${iall1[@]}" ; do
			for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do
				iterout=$((iterout + 1))
				if ((iterout > 1)) ; then
					uquit
					if [ "$?" -eq 1 ] ; then
						iterout=$((iterout - 1))
						continue 2
					fi
				fi
				echo "$(scr1pt): Loop tag: $ltag"
				echo "$(scr1pt): Starting ${_mpvloop}..."
				"$_mpvloop" "$ab" "$f1"
			done
		done
		if [ -v iterout ] ; then
			echo "$(scr1pt): $iterout iterations completed - exiting..."
		else
			echo >&2 "$(scr1pt): WARNING: Tag or pattern not found - exiting..."
		fi
	elif [ ! -e "$2" ] && [ -e "$3" ] || [ '-s' = "$3" ] ; then
		for arg in "$1" "$2" ; do
			iterin=$((iterin + 1))
			if [ -n "$prf" ] ; then
				ltag="$arg"
			elif mpv --show-profile="$(cut -d ',' -f 1 <<< "$arg")" | grep -qi 'unknown' ; then
				if [ "$iterin" -eq 1 ] ; then
					ltag="$arg"
				else
					if [ -n "$ltag" ] ; then
						echo >&2 "$(scr1pt): WARNING: Cannot define MPV profile - aborting."
						echo "$(scr1pt): Help summary: $(scr1pt) --help"
						exit 1
					fi
				fi
			else
				if [ -z "$prf" ] ; then
					prf="$arg"
				fi
			fi
		done
		if [ '-s' = "$3" ] ; then
			shuffle=y
			shift 3
		else
			shift 2
		fi
		iall3+=("$@")
		if [ -v iall3 ] ; then
			for f2 in "${iall3[@]}" ; do
				if [ -d "$f2" ] ; then
					readarray -t f3 < <(find "$f2" -regex '.*'"${lpat}${ltag}"'.*' -type f)
					if [ -n "${f3[0]}" ] ; then
						iall2+=("${f3[@]}")
					else
						continue
					fi
				elif [ -f "$f2" ] ; then
					if basename "$f2" | grep -qE "${lpat}${ltag}" ; then
						iall2+=("$f2")
					else
						continue
					fi
				else
					echo >&2 "$(scr1pt): WARNING: No such file or directory - skipping: $f2"
				fi
			done
			if [ -v shuffle ] ; then
				readarray -t iall1 < <(shuf -e "${iall2[@]}")
			else
				iall1+=("${iall2[@]}")
			fi
		else
			echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
			echo "$(scr1pt): Help summary: $(scr1pt) --help"
			exit 1
		fi
		for f1 in "${iall1[@]}" ; do
			for ab in $(basename "$f1" | grep -oE "${lpat}${ltag}" | grep -oE "$lpat") ; do
				iterout=$((iterout + 1))
				if ((iterout > 1)) ; then
					uquit
					if [ "$?" -eq 1 ] ; then
						iterout=$((iterout - 1))
						continue 2
					fi
				fi
				echo "$(scr1pt): Loop tag: $ltag"
				echo "$(scr1pt): Starting ${_mpvloop}..."
				"$_mpvloop" "$prf" "$ab" "$f1"
			done
		done
		if [ -v iterout ] ; then
			echo "$(scr1pt): $iterout iterations completed - exiting..."
		else
			echo >&2 "$(scr1pt): WARNING: Tag or pattern not found - exiting..."
		fi
	else
		echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
		echo "$(scr1pt): Help summary: $(scr1pt) --help"
	fi
else
	echo >&2 "$(scr1pt): WARNING: Invalid options - aborting."
	echo "$(scr1pt): Help summary: $(scr1pt) --help"
fi
